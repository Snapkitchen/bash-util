#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  false # edit path below
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  false # change command name below
  __test__command='command_name'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# error with stderr
# ==============================================================================

@test "returns GENERAL_ERROR when ran" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__GENERAL_ERROR}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'args'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when ran" {
  # setup
  local __test__expected_output='error'

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'args' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# ok with stdout
# ==============================================================================

@test "returns OK when ran" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'args'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints value when ran" {
  # setup
  local __test__expected_output='value'

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'args')"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "actual output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}
