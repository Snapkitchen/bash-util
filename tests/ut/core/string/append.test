#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__string__append'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid string
# ==============================================================================

@test "returns INVALID when string is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'i-n-v-a-l-i-d' 'value'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when string is invalid" {
  # setup
  local __test__expected_output="invalid string: 'i-n-v-a-l-i-d'"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'i-n-v-a-l-i-d' 'value' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# appends to a string
# ==============================================================================

@test "returns OK when appending to a string" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__string__assign 'var_name' 'hello'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' ' world'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "appends a string value to specified string" {
  # setup
  local __test__expected_value='hello world'

  bash_util__string__assign 'var_name' 'hello'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' ' world'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected value"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_value}"
  echo >&2 "----------------"
  echo >&2 "value"
  echo >&2 "----------------"
  echo >&2 "${!__test__string_name}"
  echo >&2 "----------------"
  
  # assert
  [[ "${var_name}" = "${__test__expected_value}" ]]
}
