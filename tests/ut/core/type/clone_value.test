#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__type__clone_value'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid type
# ==============================================================================

@test "returns INVALID when type is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"

  var_name=
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' 'invalid' 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when type is invalid" {
  # setup
  local __test__expected_output="invalid type: 'invalid'"

  var_name=

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'var_name_src' 'invalid' 'var_name_dest' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# cloning bool value
# ==============================================================================

@test "returns OK when cloning a bool value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__bool__assign 'var_name_src' "${BASH_UTIL__BOOL__TRUE}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__BOOL}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "clones a bool value" {
  # setup
  local __test__expected_output="${BASH_UTIL__BOOL__TRUE}"

  bash_util__bool__assign 'var_name_src' "${BASH_UTIL__BOOL__TRUE}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__BOOL}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${var_name}"
  echo >&2 "----------------"

  # assert
  [[ "${var_name_dest}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# cloning dict value
# ==============================================================================

@test "returns OK when cloning a dict value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__dict__create 'var_name_src'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__DICT}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "clones a dict value" {
  # setup
  bash_util__dict__create 'var_name_src'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__DICT}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  bash_util__dict__exists 'var_name_dest' &&
  bash_util__dict__is_valid 'var_name_dest'
}

# ==============================================================================
# cloning int value
# ==============================================================================

@test "returns OK when cloning an int value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__int__assign 'var_name_src' 10

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__INT}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "clones an int value" {
  # setup
  local __test__expected_output=10

  bash_util__int__assign 'var_name_src' 10

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__INT}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${var_name}"
  echo >&2 "----------------"

  # assert
  [[ "${var_name_dest}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# cloning list values
# ==============================================================================

@test "returns OK when cloning list values" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__list__assign 'var_name_src' 'hello' 'world'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__LIST}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "clones list values" {
  # setup
  local __test__expected_output__a='hello'
  local __test__expected_output__b='world'

  bash_util__list__assign 'var_name_src' 'hello' 'world'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__LIST}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "output value a: ${__test__expected_output__a}"
  echo >&2 "output value b: ${__test__expected_output__b}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "output value a: ${var_name[0]}"
  echo >&2 "output value b: ${var_name[1]}"
  echo >&2 "----------------"

  # assert
  [[ "${var_name_dest[0]}" = "${__test__expected_output__a}" ]]
  [[ "${var_name_dest[1]}" = "${__test__expected_output__b}" ]]
}

# ==============================================================================
# cloning string value
# ==============================================================================

@test "returns OK when cloning a string value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__string__assign 'var_name_src' 'hello world'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__STRING}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "clones a string value" {
  # setup
  local __test__expected_output='hello world'

  bash_util__string__assign 'var_name_src' 'hello world'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_src' "${BASH_UTIL__TYPE__STRING}" 'var_name_dest'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${var_name}"
  echo >&2 "----------------"

  # assert
  [[ "${var_name_dest}" = "${__test__expected_output}" ]]
}
