#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__type__set_value'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid type
# ==============================================================================

@test "returns INVALID when type is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"

  var_name=
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'invalid' 'value'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when type is invalid" {
  # setup
  local __test__expected_output="invalid type: 'invalid'"

  var_name=

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'var_name' 'invalid' 'value' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# setting bool value
# ==============================================================================

@test "returns OK when setting a bool value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__BOOL}" "${BASH_UTIL__BOOL__TRUE}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "sets a bool value" {
  # setup
  local __test__expected_output="${BASH_UTIL__BOOL__TRUE}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__BOOL}" "${BASH_UTIL__BOOL__TRUE}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${var_name}"
  echo >&2 "----------------"

  # assert
  [[ "${var_name}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# setting dict value
# ==============================================================================

@test "returns OK when setting value to dict" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__dict__create 'var_name_src'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_dest' "${BASH_UTIL__TYPE__DICT}" 'var_name_src'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "sets value to a dict" {
  # setup
  bash_util__dict__create 'var_name_src'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_dest' "${BASH_UTIL__TYPE__DICT}" 'var_name_src'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  bash_util__dict__exists 'var_name_dest' &&
  bash_util__dict__is_valid 'var_name_dest'
}

# ==============================================================================
# setting int value
# ==============================================================================

@test "returns OK when setting an int value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__INT}" 10
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "sets an int value" {
  # setup
  local __test__expected_output=10

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__INT}" 10
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${var_name}"
  echo >&2 "----------------"

  # assert
  [[ "${var_name}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# setting list value
# ==============================================================================

@test "returns OK when setting value to list" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__list__assign 'var_name_src' 'hello' 'world'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_dest' "${BASH_UTIL__TYPE__LIST}" 'var_name_src'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "sets value to list" {
  # setup
  bash_util__list__assign 'var_name_src' 'hello' 'world'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name_dest' "${BASH_UTIL__TYPE__LIST}" 'var_name_src'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  bash_util__list__exists 'var_name_dest' &&
  bash_util__list__is_valid 'var_name_dest'
}

# ==============================================================================
# setting string value
# ==============================================================================

@test "returns OK when setting a string value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__STRING}" 'hello world'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "sets a string value" {
  # setup
  local __test__expected_output='hello world'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__STRING}" 'hello world'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${var_name}"
  echo >&2 "----------------"

  # assert
  [[ "${var_name}" = "${__test__expected_output}" ]]
}
