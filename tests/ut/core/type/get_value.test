#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__type__get_value'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid type
# ==============================================================================

@test "returns INVALID when type is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"

  var_name=
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'invalid'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when type is invalid" {
  # setup
  local __test__expected_output="invalid type: 'invalid'"

  var_name=

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'var_name' 'invalid' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# print bool value
# ==============================================================================

@test "returns OK when printing a bool value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__bool__assign 'var_name' "${BASH_UTIL__BOOL__TRUE}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__BOOL}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints a bool value" {
  # setup
  local __test__expected_output="${BASH_UTIL__BOOL__TRUE}"
  
  bash_util__bool__assign 'var_name' "${BASH_UTIL__BOOL__TRUE}"

  # execute
  local __test__exit_code=
  local __test__output=
  {
    __test__output=$("${__test__command}" 'var_name' "${BASH_UTIL__TYPE__BOOL}")
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "actual output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# print dict as name
# ==============================================================================

@test "returns OK when printing a dict as name" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__dict__create 'var_name'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__DICT}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints a dict as name of var provided" {
  # setup
  local __test__expected_output='var_name'

  bash_util__dict__create 'var_name'

  # execute
  local __test__exit_code=
  local __test__output=
  {
    __test__output=$("${__test__command}" 'var_name' "${BASH_UTIL__TYPE__DICT}")
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# print int value
# ==============================================================================

@test "returns OK when printing an int value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__int__assign 'var_name' 10
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__INT}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints an int value" {
  # setup
  local __test__expected_output=10

  bash_util__int__assign 'var_name' 10

  # execute
  local __test__exit_code=
  local __test__output=
  {
    __test__output=$("${__test__command}" 'var_name' "${BASH_UTIL__TYPE__INT}")
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# print list as name
# ==============================================================================

@test "returns OK when printing a list as name" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__list__create 'var_name'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__LIST}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints a list as name of var provided" {
  # setup
  local __test__expected_output='var_name'

  bash_util__list__create 'var_name'

  # execute
  local __test__exit_code=
  local __test__output=
  {
    __test__output=$("${__test__command}" 'var_name' "${BASH_UTIL__TYPE__LIST}")
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# print string value
# ==============================================================================

@test "returns OK when printing a string value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__string__assign 'var_name' 'hello world'
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' "${BASH_UTIL__TYPE__STRING}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints a string value" {
  # setup
  local __test__expected_output='hello world'
  
  bash_util__string__assign 'var_name' 'hello world'

  # execute
  local __test__exit_code=
  local __test__output=
  {
    __test__output=$("${__test__command}" 'var_name' "${BASH_UTIL__TYPE__STRING}")
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}
