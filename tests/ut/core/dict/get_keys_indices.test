#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__dict__get_keys_indices'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# dict is invalid
# ==============================================================================

@test "returns INVALID when dict is invalid" {
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when dict is invalid" {
  # setup
  local __test__expected_output="invalid dict: 'var_name'"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output=$("${__test__command}" 'var_name' 2>&1 1>/dev/null)
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# prints the keys indices
# ==============================================================================

@test "returns OK when printing the keys indices" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__dict__create 'var_name'
  bash_util__dict__add_key 'var_name' 'key_a' "${BASH_UTIL__TYPE__STRING}"
  bash_util__dict__add_key 'var_name' 'key_b' "${BASH_UTIL__TYPE__STRING}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints the keys indices" {
  # setup
  local __test__expected_output='0 1'
  
  bash_util__dict__create 'var_name'
  bash_util__dict__add_key 'var_name' 'key_a' "${BASH_UTIL__TYPE__STRING}"
  bash_util__dict__add_key 'var_name' 'key_b' "${BASH_UTIL__TYPE__STRING}"

  # execute
  local __test__exit_code=
  local __test__output=
  {
    __test__output=$("${__test__command}" 'var_name')
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}
