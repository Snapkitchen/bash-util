#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__bool__destroy'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# bool variable
# ==============================================================================

@test "returns OK when destroying a bool variable" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__bool__assign 'var_name' "${BASH_UTIL__BOOL__TRUE}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "destroys a bool variable" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  bash_util__bool__assign 'var_name' "${BASH_UTIL__BOOL__TRUE}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  bash_util__var__is_unset 'var_name'
}
