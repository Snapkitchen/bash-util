#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__bool__value_is_false'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid bool value
# ==============================================================================

@test "returns FALSE when bool value is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__FALSE}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'invalid'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================
# bool value is true
# ==============================================================================

@test "returns FALSE when bool value is true" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__FALSE}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" "${BASH_UTIL__BOOL__TRUE}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================
# bool value is false
# ==============================================================================

@test "returns TRUE when bool value is false" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__TRUE}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" "${BASH_UTIL__BOOL__FALSE}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}
