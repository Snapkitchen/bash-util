#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__bool__convert_from_exit_code'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid exit code
# ==============================================================================

@test "returns INVALID when exit code is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'invalid'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when exit code is invalid" {
  # setup
  local __test__expected_output="invalid exit code: 'invalid'"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'invalid' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# exit code is TRUE
# ==============================================================================

@test "returns OK when exit code is TRUE" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" "${BASH_UTIL__CODE__TRUE}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "converts TRUE exit code to bool true" {
  # setup
  local __test__expected_output="${BASH_UTIL__BOOL__TRUE}"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" "${BASH_UTIL__CODE__TRUE}")"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# exit code is not TRUE
# ==============================================================================

@test "returns OK when exit code is not TRUE" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" "${BASH_UTIL__CODE__FALSE}"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "converts not TRUE exit code to bool false" {
  # setup
  local __test__expected_output="${BASH_UTIL__BOOL__FALSE}"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" "${BASH_UTIL__CODE__FALSE}")"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}
