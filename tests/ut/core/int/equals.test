#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__int__equals'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# first int invalid
# ==============================================================================

@test "returns INVALID when first int invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'invalid' 10
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when first int invalid" {
  # setup
  local __test__expected_output="invalid first int value: 'invalid'"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'invalid' 10 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# second int invalid
# ==============================================================================

@test "returns INVALID when second int invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 10 'invalid'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when second int invalid" {
  # setup
  local __test__expected_output="invalid second int value: 'invalid'"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 10 'invalid' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# comparing equal valid ints
# ==============================================================================

@test "returns TRUE when comparing two equal valid ints" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__TRUE}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 10 10
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================
# comparing different valid ints
# ==============================================================================

@test "returns FALSE when comparing two different valid ints" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__FALSE}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 10 20
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}
