#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  __test__command='bash_util__list__assign'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# assign values to list
# ==============================================================================

@test "returns OK when assigning to list" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'hello world' 'foo' 'bar'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "overwrites existing list with specified values" {
  # setup
  local __test__expected_output__a='different'
  local __test__expected_output__b='values'

  bash_util__list__create "var_name"
  bash_util__list__append "var_name" 'hello world' 'foo' 'bar' 'baz'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" "var_name" 'different' 'values'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected list values"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_list[@]}"
  echo >&2 "----------------"
  echo >&2 "list values"
  echo >&2 "----------------"
  echo >&2 "${__test__list[@]}"
  echo >&2 "----------------"

  # get items from list
  local __test__output_a=
  __test__output_a="$(bash_util__list__get_element_value 'var_name' 0)"
  
  local __test__output_b=
  __test__output_b="$(bash_util__list__get_element_value 'var_name' 1)"

  # assert
  [[ "${__test__output_a}" = "${__test__expected_output__a}" ]]
  [[ "${__test__output_b}" = "${__test__expected_output__b}" ]]
}
