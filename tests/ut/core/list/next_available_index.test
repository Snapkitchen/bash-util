#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  __test__command='bash_util__list__next_available_index'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid list
# ==============================================================================

@test "returns INVALID when list is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when list is invalid" {
  # setup
  local __test__expected_output="invalid list: 'var_name'"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'var_name' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# no values
# ==============================================================================

@test "prints next available index when list has no values" {
  # setup
  local __test__expected_output=0

  bash_util__list__create 'var_name'

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output=$("${__test__command}" 'var_name')
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# one zero value
# ==============================================================================

@test "prints next available index when list has one zero value" {
  # setup
  local __test__expected_output=1

  bash_util__list__create 'var_name'
  bash_util__list__set_element_value 'var_name' 0 'zero'

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output=$("${__test__command}" 'var_name')
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# non-contiguous values
# ==============================================================================

@test "prints next available index when list has non-contiguous values with zero first index" {
  # setup
  local __test__expected_output=1

  bash_util__list__create 'var_name'
  bash_util__list__set_element_value 'var_name' 0 'zero'
  bash_util__list__set_element_value 'var_name' 2 'two'
  bash_util__list__set_element_value 'var_name' 4 'four'
  bash_util__list__set_element_value 'var_name' 5 'five'

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output=$("${__test__command}" 'var_name')
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  [[ "${__test__output}" = "${__test__expected_output}" ]]
}


# ==============================================================================

@test "prints next available index when list has non-contiguous values with non-zero first index" {
  # setup
  local __test__expected_output=0

  bash_util__list__create 'var_name'
  bash_util__list__set_element_value 'var_name' 2 'two'
  bash_util__list__set_element_value 'var_name' 4 'four'
  bash_util__list__set_element_value 'var_name' 5 'five'
  bash_util__list__set_element_value 'var_name' 10 'ten'

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output=$("${__test__command}" 'var_name')
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# contiguous values
# ==============================================================================

@test "prints next available index when list has contiguous values" {
  # setup
  local __test__expected_output=4

  bash_util__list__create 'var_name'
  bash_util__list__set_element_value 'var_name' 0 'zero'
  bash_util__list__set_element_value 'var_name' 1 'one'
  bash_util__list__set_element_value 'var_name' 2 'two'
  bash_util__list__set_element_value 'var_name' 3 'three'

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output=$("${__test__command}" 'var_name')
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  [[ "${__test__output}" = "${__test__expected_output}" ]]
}
