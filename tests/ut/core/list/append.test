#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  __test__command='bash_util__list__append'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# invalid list
# ==============================================================================

@test "returns INVALID when list is invalid" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__INVALID}"

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'value'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"

  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when list is invalid" {
  # setup
  local __test__expected_output="invalid list: 'var_name'"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" 'var_name' 'value' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# no values provided
# ==============================================================================

@test "returns OK when no values provided" {
  # setup
  local __test__expected_exit_code=0
  
  bash_util__list__create 'var_name'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "adds nothing when no values provided" {
  # setup
  local __test__expected_output=0
  
  bash_util__list__create 'var_name'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # get item from list
  local __test__output=
  __test__output="$(bash_util__list__length 'var_name')"
  
  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" -eq "${__test__expected_output}" ]]
}

# ==============================================================================
# appends value
# ==============================================================================

@test "returns OK when appending a value" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__list__create 'var_name'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'value'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "appends value to array" {
  # setup
  local __test__expected_output='value'
  
  bash_util__list__create 'var_name'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'value'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # get item from list
  local __test__output=
  __test__output="$(bash_util__list__get_element_value 'var_name' 0)"
  
  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = "${__test__expected_output}" ]]
}

# ==============================================================================
# appends values
# ==============================================================================

@test "returns OK when appending values" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__list__create 'var_name'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'hello world' 'foo bar'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "appends values to array" {
  # setup
  local __test__expected_output__a='hello world'
  local __test__expected_output__b='foo bar'
  
  bash_util__list__create 'var_name'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'hello world' 'foo bar'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # get item from list
  local __test__output_a=
  __test__output_a="$(bash_util__list__get_element_value 'var_name' 0)"
  
  local __test__output_b=
  __test__output_b="$(bash_util__list__get_element_value 'var_name' 1)"
  
  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "list first value: ${__test__expected_output__a}"
  echo >&2 "list second value: ${__test__expected_output__b}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "list first value: ${__test__output_a}"
  echo >&2 "list second value: ${__test__output_b}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output_a}" = "${__test__expected_output__a}" ]]
  [[ "${__test__output_b}" = "${__test__expected_output__b}" ]]
}

# ==============================================================================
# appends values to non-contiguous array
# ==============================================================================

@test "returns OK when appending values to non-contiguous array" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  bash_util__list__create 'var_name'
  bash_util__list__set_element_value 'var_name' 0 'hello'
  bash_util__list__set_element_value 'var_name' 2 'world'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'foo' 'bar'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "appends values to non-contiguous array" {
  # setup
  local __test__expected_output__a='foo'
  local __test__expected_output__b='bar'
  
  bash_util__list__create 'var_name'
  bash_util__list__set_element_value 'var_name' 0 'hello'
  bash_util__list__set_element_value 'var_name' 2 'world'

  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name' 'foo' 'bar'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # get items from list
  local __test__output_a=
  __test__output_a="$(bash_util__list__get_element_value 'var_name' 1)"
  
  local __test__output_b=
  __test__output_b="$(bash_util__list__get_element_value 'var_name' 3)"
  
  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "list first value: ${__test__expected_output__a}"
  echo >&2 "list second value: ${__test__expected_output__b}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "list first value: ${__test__output_a}"
  echo >&2 "list second value: ${__test__output_b}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output_a}" = "${__test__expected_output__a}" ]]
  [[ "${__test__output_b}" = "${__test__expected_output__b}" ]]
}
