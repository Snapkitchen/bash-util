#!/usr/bin/env bats

#
# setup
#

setup() {
  # load common lib
  load '../../../lib/common'
  
  # load bash util
  __test__load_bash_util
  
  # set command name
  __test__command='bash_util__var__destroy'
}

#
# tear down
#

# teardown() {
# }

#
# test definitions
#

# ==============================================================================
# null var name
# ==============================================================================

@test "returns NULL when var name is null" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__NULL}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" ''
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "prints stderr message when var name is null" {
  # setup
  local __test__expected_output="var name is null"

  # execute
  local __test__output=
  local __test__exit_code=
  {
    __test__output="$("${__test__command}" '' 2>&1 1>/dev/null)"
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }

  # debug output
  echo >&2 "exit code: ${__test__exit_code}"
  echo >&2 "expected output"
  echo >&2 "----------------"
  echo >&2 "${__test__expected_output}"
  echo >&2 "----------------"
  echo >&2 "output"
  echo >&2 "----------------"
  echo >&2 "${__test__output}"
  echo >&2 "----------------"

  # assert
  [[ "${__test__output}" = *"${__test__expected_output}"* ]]
}

# ==============================================================================
# variable that exists
# ==============================================================================

@test "returns OK when destroying a variable that exists" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  var_name=
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}

# ==============================================================================

@test "destroys a variable that exists" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"

  var_name=
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  bash_util__var__is_unset 'var_name'
}

# ==============================================================================
# variable that doesn't exist
# ==============================================================================

@test "returns OK when destroying a variable that does not exist" {
  # setup
  local __test__expected_exit_code="${BASH_UTIL__CODE__OK}"
  
  # execute
  local __test__exit_code=
  {
    "${__test__command}" 'var_name'
    __test__exit_code=$?
  } || {
    __test__exit_code=$?
  }
  
  # debug info on failure
  echo >&2 "expected exit code: ${__test__expected_exit_code}"
  echo >&2 "exit code: ${__test__exit_code}"
  
  # assert
  [[ "${__test__exit_code}" -eq "${__test__expected_exit_code}" ]]
}
